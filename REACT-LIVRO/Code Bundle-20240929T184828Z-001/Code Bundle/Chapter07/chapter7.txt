create-next-app‌ ‌‌
npx‌
npx‌ ‌create-next-app‌ ‌--example‌ ‌with-typescript‌ ‌my-custom-app‌ ‌
create-next-app‌‌
my-custom-app‌ ‌‌
npm‌ ‌install‌‌
package.json‌‌
npm‌ ‌run‌ ‌dev‌‌



//‌ ‌about.ts‌ ‌
import‌ ‌*‌ ‌as‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌Link‌ ‌from‌ ‌'next/link'‌ ‌
import‌ ‌Layout‌ ‌from‌ ‌'../components/Layout'‌ ‌
import‌ ‌{‌ ‌NextPage,‌ ‌NextPageContext‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
 ‌
type‌ ‌Props‌ ‌=‌ ‌{‌ ‌
someprop:‌ ‌string‌ ‌
}‌ ‌
 ‌
const‌ ‌AboutPage:‌ ‌NextPage<Props>‌ ‌=‌ ‌(props:‌ ‌Props)‌ ‌=>‌ ‌(‌ ‌
<Layout‌ ‌title="About‌ ‌|‌ ‌Next.js‌ ‌+‌ ‌TypeScript‌ ‌Example">‌ ‌

<h1>About</h1>‌ ‌

<p>This‌ ‌is‌ ‌the‌ ‌about‌ ‌page</p>‌ ‌

<p>‌ ‌


<Link‌ ‌href="/">‌ ‌



<a>Go‌ ‌home‌‌
 ‌{props.someprop}‌
</a>‌ ‌


</Link>‌ ‌

</p>‌ ‌
</Layout>‌ ‌
)‌ ‌
 ‌
AboutPage.getInitialProps‌ ‌=‌ ‌async‌ ‌({pathname,‌ ‌query}:‌ ‌NextPageContext)‌ ‌=>‌ ‌{‌ ‌ ‌
console.log(pathname,‌ ‌query)‌ ‌ ‌
return‌ ‌{‌ ‌

someprop:‌ ‌'customvalue'‌ ‌
}‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌AboutPage‌ ‌

 ‌
//‌ ‌pages/index.ts‌ ‌
import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
 ‌
const‌ ‌IndexPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌
 ‌



<h1>Login</h1>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn">Sign‌ ‌In</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌IndexPage‌ ‌

//‌ ‌styles.css‌ ‌
 ‌
*‌ ‌{‌ ‌
margin:‌ ‌0;‌ ‌
padding:‌ ‌0;‌ ‌
box-sizing:‌ ‌border-box;‌ ‌
outline:‌ ‌0;‌ ‌
}‌ ‌
 ‌
body‌ ‌{‌ ‌
font-family:‌ ‌'Open‌ ‌Sans',‌ ‌sans-serif;‌ ‌
background:‌ ‌#3498db;‌ ‌
margin:‌ ‌0‌ ‌auto‌ ‌0‌ ‌auto;‌ ‌
width:‌ ‌100%;‌ ‌
text-align:‌ ‌center;‌ ‌
margin:‌ ‌20px‌ ‌0px‌ ‌20px‌ ‌0px;‌ ‌
}‌ ‌
 ‌
p‌ ‌{‌ ‌
font-size:‌ ‌12px;‌ ‌
text-decoration:‌ ‌none;‌ ‌
color:‌ ‌#ffffff;‌ ‌
}‌ ‌
 ‌
h1‌ ‌{‌ ‌
font-size:‌ ‌1.5em;‌ ‌
color:‌ ‌#525252;‌ ‌
}‌ ‌
 ‌
.box‌ ‌{‌ ‌
background:‌ ‌white;‌ ‌
width:‌ ‌300px;‌ ‌
position:‌ ‌absolute;‌ ‌
top:‌ ‌50%;‌ ‌
left:‌ ‌50%;‌ ‌
transform:‌ ‌translate(-50%,‌ ‌-50%);‌ ‌
border-radius:‌ ‌6px;‌ ‌
padding:‌ ‌20px;‌ ‌
box-shadow:‌ ‌0‌ ‌0‌ ‌5px‌ ‌black;‌ ‌
}‌ ‌
 ‌
.field‌ ‌{‌ ‌
background:‌ ‌#ecf0f1;‌ ‌
border:‌ ‌#ccc‌ ‌1px‌ ‌solid;‌ ‌
border-bottom:‌ ‌#ccc‌ ‌2px‌ ‌solid;‌ ‌
padding:‌ ‌8px;‌ ‌
width:‌ ‌100%;‌ ‌
color:‌ ‌#AAA;‌ ‌
margin-top:‌ ‌10px;‌ ‌
font-size:‌ ‌1em;‌ ‌
border-radius:‌ ‌4px;‌ ‌
}‌ ‌
 ‌
.btn‌ ‌{‌ ‌
background:‌ ‌#2ecc71;‌ ‌
width:‌ ‌100%;‌ ‌
cursor:‌ ‌pointer;‌ ‌
padding:‌ ‌5px‌ ‌0;‌ ‌
color:‌ ‌white;‌ ‌
border-radius:‌ ‌4px;‌ ‌
border:‌ ‌#27ae60‌ ‌1px‌ ‌solid;‌ ‌
margin-top:‌ ‌20px;‌ ‌
font-weight:‌ ‌800;‌ ‌
font-size:‌ ‌0.8em;‌ ‌
}‌ ‌
 ‌
.btn:hover‌ ‌{‌ ‌
background:‌ ‌#2CC06B;‌ ‌
}‌ ‌
styles.css‌‌
next.config.js‌ ‌‌
//‌ ‌next.config.js‌ ‌
const‌ ‌withCSS‌ ‌=‌ ‌require('@zeit/next-css')‌ ‌
module.exports‌ ‌=‌ ‌withCSS({})‌ ‌
@zeit/next-css‌ ‌‌
npm‌ ‌i‌ ‌@zeit/next-css‌ ‌-S‌ ‌
 ‌


//‌ ‌pages/api/login/index.ts‌ ‌
import‌ ‌{‌ ‌NextApiRequest,‌ ‌NextApiResponse‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
 ‌
export‌ ‌default‌ ‌async‌ ‌(req:‌ ‌NextApiRequest,‌ ‌res:‌ ‌NextApiResponse)‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌{‌ ‌username,‌ ‌password‌ ‌}‌ ‌=‌ ‌req.body‌ ‌
 ‌
if(username‌ ‌===‌ ‌'admin'‌ ‌&&‌ ‌password‌ ‌===‌ ‌'admin')‌ ‌{‌ ‌

return‌ ‌res.json({‌ ‌


status:‌ ‌'ok',‌ ‌


data:‌ ‌{‌ ‌



name:‌ ‌'Mehul‌ ‌Mohan',‌ ‌



age:‌ ‌21,‌ ‌



favQuote:‌ ‌'Nobody‌ ‌cares‌ ‌about‌ ‌your‌ ‌feelings‌ ‌bro.'‌ ‌


}‌ ‌

})‌ ‌
}‌ ‌
 ‌
return‌ ‌res.json({‌ ‌status:‌ ‌'error',‌ ‌message:‌ ‌'Invalid‌ ‌login'‌ ‌})‌ ‌
}‌ ‌
 ‌


export‌ ‌declare‌ ‌type‌ ‌NextApiResponse<T‌ ‌=‌ ‌any>‌ ‌=‌ ‌ServerResponse‌ ‌&‌ ‌{‌ ‌
    ‌/**‌ ‌
     ‌*‌ ‌Send‌ ‌data‌ ‌`any`‌ ‌data‌ ‌in‌ ‌response‌ ‌
     ‌*/‌ ‌
    ‌send:‌ ‌Send<T>;‌ ‌
    ‌/**‌ ‌
     ‌*‌ ‌Send‌ ‌data‌ ‌`json`‌ ‌data‌ ‌in‌ ‌response‌ ‌
     ‌*/‌ ‌
    ‌json:‌ ‌Send<T>;‌ ‌
    ‌status:‌ ‌(statusCode:‌ ‌number)‌ ‌=>‌ ‌NextApiResponse<T>;‌ ‌
};‌ ‌


//‌ ‌pages/index.tsx‌ ‌
 ‌
import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
 ‌
const‌ ‌IndexPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
‌
async‌ ‌function‌ ‌submitForm()‌ ‌{‌ ‌

const‌ ‌req‌ ‌=‌ ‌await‌ ‌fetch('/api/login',‌ ‌{‌ ‌


method:‌ ‌'POST',‌ ‌


headers:‌ ‌{‌ ‌



'Content-Type':‌ ‌'application/json'‌ ‌


},‌ ‌


body:‌ ‌JSON.stringify({‌ ‌username,‌ ‌password‌ ‌})‌ ‌

})‌ ‌

const‌ ‌json‌ ‌=‌ ‌await‌ ‌req.json()‌ ‌

console.log(json)‌ ‌
}‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌



<h1>Login</h1>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn"‌ ‌‌
onClick={submitForm}‌
>Sign‌ ‌In</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌IndexPage‌ ‌

npm‌ ‌install‌ ‌react-redux‌ ‌redux‌ ‌next-redux-wrapper‌ ‌--save‌ ‌

//‌ ‌reducer.ts‌ ‌
 ‌
type‌ ‌Action‌ ‌=‌ ‌{‌ ‌
type:‌ ‌string‌ ‌
payload?:‌ ‌any‌ ‌
}‌ ‌
 ‌
export‌ ‌type‌ ‌UserDetails‌ ‌=‌ ‌{‌ ‌
name:‌ ‌string‌ ‌
age:‌ ‌number‌ ‌
favQuote:‌ ‌string‌ ‌
}‌ ‌
 ‌
export‌ ‌type‌ ‌State‌ ‌=‌ ‌{‌ ‌
user:‌ ‌UserDetails‌ ‌|‌ ‌null‌ ‌
}‌ ‌
 ‌
const‌ ‌defaultState:‌ ‌State‌ ‌=‌ ‌{‌ ‌
user:‌ ‌null‌ ‌
}‌ ‌
 ‌
const‌ ‌reducer‌ ‌=‌ ‌(state:‌ ‌State‌ ‌=‌ ‌defaultState,‌ ‌action:‌ ‌Action)‌ ‌=>‌ ‌{‌ ‌
switch‌ ‌(action.type)‌ ‌{‌ ‌
        ‌case‌ ‌'SET_USER_DETAILS':‌ ‌
            ‌return‌ ‌{‌ ‌



...state,‌ ‌ ‌



user:‌ ‌<UserDetails>action.payload‌ ‌


}‌ ‌
        ‌default:‌ ‌
            ‌return‌ ‌state‌ ‌
    ‌}‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌reducer‌ ‌
 ‌


//‌ ‌pages/_app.tsx‌ ‌
import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌createStore,‌ ‌Store,‌ ‌compose‌ ‌}‌ ‌from‌ ‌'redux'‌ ‌
import‌ ‌{‌ ‌Provider‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
import‌ ‌withRedux‌ ‌from‌ ‌'next-redux-wrapper'‌ ‌
import‌ ‌reducer,‌ ‌{‌ ‌State‌ ‌}‌ ‌from‌ ‌'../redux/reducer'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌{‌ ‌NextComponentType,‌ ‌NextPageContext‌ ‌}‌ ‌from‌ ‌'next/dist/next-server/lib/utils'‌ ‌
 ‌
let‌ ‌devTools‌ ‌=‌ ‌(f:‌ ‌any)‌ ‌=>‌ ‌f‌ ‌
 ‌
if(process.browser)‌ ‌{‌ ‌
const‌ ‌_window‌ ‌=‌ ‌window‌ ‌as‌ ‌any‌ ‌
if(_window.__REDUX_DEVTOOLS_EXTENSION__)‌ ‌{‌ ‌

devTools‌ ‌=‌ ‌_window.__REDUX_DEVTOOLS_EXTENSION__()‌ ‌
}‌ ‌
}‌ ‌
 ‌
const‌ ‌makeStore‌ ‌=‌ ‌(initialState:‌ ‌State)‌ ‌=>‌ ‌{‌ ‌
    ‌return‌ ‌createStore(reducer,‌ ‌initialState,‌ ‌compose(devTools))‌ ‌
}‌ ‌
 ‌
 ‌
type‌ ‌Props‌ ‌=‌ ‌{‌ ‌
Component:‌ ‌NextComponentType<NextPageContext>,‌ ‌
pageProps:‌ ‌any,‌ ‌
store:‌ ‌Store‌ ‌
}‌ ‌
 ‌
const‌ ‌MyApp:‌ ‌NextPage<Props>‌ ‌=‌ ‌props‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌{‌ ‌Component,‌ ‌pageProps,‌ ‌store‌ ‌}‌ ‌=‌ ‌props‌ ‌
 ‌
return‌ ‌(‌ ‌

<Provider‌ ‌store={store}>‌ ‌


<Component‌ ‌{...pageProps}‌ ‌/>‌ ‌

</Provider>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌withRedux(makeStore)(MyApp)‌ ‌
 ‌

import‌ ‌{‌ ‌UserDetails‌ ‌}‌ ‌from‌ ‌'./reducer'‌ ‌
 ‌
export‌ ‌const‌ ‌setUserDetails‌ ‌=‌ ‌(payload:‌ ‌UserDetails)‌ ‌=>‌ ‌{‌ ‌
return‌ ‌{‌ ‌type:‌ ‌'SET_USER_DETAILS',‌ ‌payload‌ ‌}‌ ‌
}‌ ‌
 ‌

 ‌
import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
import‌ ‌{‌ ‌connect‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
import‌ ‌{‌ ‌setUserDetails‌ ‌}‌ ‌from‌ ‌'../redux/actions'‌ ‌
 ‌
type‌ ‌Props‌ ‌=‌ ‌{‌ ‌
setUserDetails(json:‌ ‌any):‌ ‌void‌ ‌
name?:‌ ‌string‌ ‌
}‌ ‌
 ‌
const‌ ‌IndexPage:‌ ‌NextPage<Props>‌ ‌=‌ ‌(props)‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
async‌ ‌function‌ ‌submitForm()‌ ‌{‌ ‌

const‌ ‌req‌ ‌=‌ ‌await‌ ‌fetch('/api/login',‌ ‌{‌ ‌


method:‌ ‌'POST',‌ ‌


headers:‌ ‌{‌ ‌



'Content-Type':‌ ‌'application/json'‌ ‌


},‌ ‌


body:‌ ‌JSON.stringify({‌ ‌username,‌ ‌password‌ ‌})‌ ‌

})‌ ‌

const‌ ‌json‌ ‌=‌ ‌await‌ ‌req.json()‌ ‌

console.log(json)‌ ‌

props.setUserDetails(json.data)‌ ‌
}‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌
 ‌



<h1>Login</h1>‌ ‌



{props.name‌ ‌||‌ ‌'na'}‌ ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn"‌ ‌onClick={submitForm}>Sign‌ ‌In</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
const‌ ‌‌
mapStateToProps‌‌
 ‌=‌ ‌({‌ ‌user‌ ‌}:‌ ‌any)‌ ‌=>‌ ‌{‌ ‌
return‌ ‌{‌ ‌

name:‌ ‌user‌ ‌&&‌ ‌user.name‌ ‌
}‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌connect(mapStateToProps,‌ ‌{‌ ‌setUserDetails‌ ‌})(IndexPage)‌ ‌


import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
import‌ ‌{‌ ‌useSelector,‌ ‌useDispatch‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
import‌ ‌{‌ ‌setUserDetails‌ ‌}‌ ‌from‌ ‌'../redux/actions'‌ ‌
 ‌
const‌ ‌IndexPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
const‌ ‌dispatch‌ ‌=‌ ‌useDispatch()‌ ‌
const‌ ‌name‌ ‌=‌ ‌useSelector((state:‌ ‌any)‌ ‌=>‌ ‌state.user‌ ‌&&‌ ‌state.user.name)‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
async‌ ‌function‌ ‌submitForm()‌ ‌{‌ ‌

const‌ ‌req‌ ‌=‌ ‌await‌ ‌fetch('/api/login',‌ ‌{‌ ‌


method:‌ ‌'POST',‌ ‌


headers:‌ ‌{‌ ‌



'Content-Type':‌ ‌'application/json'‌ ‌


},‌ ‌


body:‌ ‌JSON.stringify({‌ ‌username,‌ ‌password‌ ‌})‌ ‌

})‌ ‌

const‌ ‌json‌ ‌=‌ ‌await‌ ‌req.json()‌ ‌

console.log(json)‌ ‌

dispatch(setUserDetails(json.data))‌ ‌
}‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌
 ‌



<h1>Login</h1>‌ ‌



{name‌ ‌||‌ ‌'na'}‌ ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn"‌ ‌onClick={submitForm}>Sign‌ ‌In</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌IndexPage‌ ‌

import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌{‌ ‌useSelector‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
 ‌
const‌ ‌DashboardPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
const‌ ‌user‌ ‌=‌ ‌useSelector((state:‌ ‌any)‌ ‌=>‌ ‌state.user)‌ ‌
 ‌
if(!user)‌ ‌return‌ ‌<p>User‌ ‌not‌ ‌available</p>‌ ‌
 ‌
return‌ ‌(‌ ‌

<div‌ ‌id="dashboard">‌ ‌


<h1>Hello‌ ‌{user.name}</h1>‌ ‌


<p>Your‌ ‌favorite‌ ‌quote:‌ ‌{user.favQuote}</p>‌ ‌

</div>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌DashboardPage‌ ‌

//‌ ‌pages/index.tsx‌ ‌
import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
import‌ ‌{‌ ‌useSelector,‌ ‌useDispatch‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
import‌ ‌{‌ ‌setUserDetails‌ ‌}‌ ‌from‌ ‌'../redux/actions'‌ ‌
import‌ ‌Router‌ ‌from‌ ‌'next/router'‌ ‌
 ‌
const‌ ‌IndexPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
const‌ ‌dispatch‌ ‌=‌ ‌useDispatch()‌ ‌
const‌ ‌name‌ ‌=‌ ‌useSelector((state:‌ ‌any)‌ ‌=>‌ ‌state.user‌ ‌&&‌ ‌state.user.name)‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
async‌ ‌function‌ ‌submitForm()‌ ‌{‌ ‌

const‌ ‌req‌ ‌=‌ ‌await‌ ‌fetch('/api/login',‌ ‌{‌ ‌


method:‌ ‌'POST',‌ ‌


headers:‌ ‌{‌ ‌



'Content-Type':‌ ‌'application/json'‌ ‌


},‌ ‌


body:‌ ‌JSON.stringify({‌ ‌username,‌ ‌password‌ ‌})‌ ‌

})‌ ‌

const‌ ‌json‌ ‌=‌ ‌await‌ ‌req.json()‌ ‌
 ‌

if(json.status‌ ‌===‌ ‌'ok')‌ ‌{‌ ‌


dispatch(setUserDetails(json.data))‌ ‌


Router.push('/dashboard')‌ ‌

}‌ ‌else‌ ‌{‌ ‌


alert('Incorrect‌ ‌Login')‌ ‌

}‌ ‌
 ‌
}‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌
 ‌



<h1>Login</h1>‌ ‌



{name‌ ‌||‌ ‌'na'}‌ ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn"‌ ‌onClick={submitForm}>Sign‌ ‌In</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌IndexPage‌ ‌

import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
 ‌
const‌ ‌PathPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
return‌ ‌(‌ ‌

<h1>Hello‌ ‌from‌ ‌very‌ ‌deep‌ ‌inside!</h1>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌PathPage‌ ‌

//‌ ‌pages/users/index.tsx‌ ‌
import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
 ‌
const‌ ‌UsersPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
return‌ ‌(‌ ‌

<h1>Just‌ ‌a‌ ‌regular‌ ‌file</h1>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌UsersPage‌ ‌
//‌ ‌pages/users/[param].tsx‌ ‌
import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
 ‌
const‌ ‌UsersPageDynamic:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
return‌ ‌(‌ ‌

<h1>Just‌ ‌a‌ ‌regular‌ ‌file‌ ‌too</h1>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌UsersPageDynamic‌ ‌
 ‌

//‌ ‌pages/users/[param].tsx‌ ‌
import‌ ‌React‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌{‌ ‌useRouter‌ ‌}‌ ‌from‌ ‌'next/router'‌ ‌
 ‌
const‌ ‌UsersPageDynamic:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌router‌ ‌=‌ ‌useRouter()‌ ‌
console.log(router)‌ ‌
 ‌
return‌ ‌(‌ ‌

<h1>Just‌ ‌a‌ ‌regular‌ ‌file‌ ‌too‌ ‌{router.query.param}</h1>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌UsersPageDynamic‌ ‌


/register‌ ‌‌
//‌ ‌pages/register/index.tsx‌ ‌
import‌ ‌React,‌ ‌{‌ ‌useState‌ ‌}‌ ‌from‌ ‌'react'‌ ‌
import‌ ‌{‌ ‌NextPage‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌'./styles.css'‌ ‌
import‌ ‌{‌ ‌useDispatch‌ ‌}‌ ‌from‌ ‌'react-redux'‌ ‌
import‌ ‌{‌ ‌setUserDetails‌ ‌}‌ ‌from‌ ‌'../../redux/actions'‌ ‌
import‌ ‌Router‌ ‌from‌ ‌'next/router'‌ ‌
 ‌
const‌ ‌RegisterPage:‌ ‌NextPage‌ ‌=‌ ‌()‌ ‌=>‌ ‌{‌ ‌
const‌ ‌dispatch‌ ‌=‌ ‌useDispatch()‌ ‌
 ‌
const‌ ‌[username,‌ ‌setUsername]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[password,‌ ‌setPassword]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[name,‌ ‌setName]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[age,‌ ‌setAge]‌ ‌=‌ ‌useState<string>('')‌ ‌
const‌ ‌[quote,‌ ‌setQuote]‌ ‌=‌ ‌useState<string>('')‌ ‌
 ‌
async‌ ‌function‌ ‌submitForm()‌ ‌{‌ ‌

const‌ ‌req‌ ‌=‌ ‌await‌ ‌fetch('/api/register',‌ ‌{‌ ‌


method:‌ ‌'POST',‌ ‌


headers:‌ ‌{‌ ‌



'Content-Type':‌ ‌'application/json'‌ ‌


},‌ ‌


body:‌ ‌JSON.stringify({‌ ‌username,‌ ‌password,‌ ‌name,‌ ‌age,‌ ‌quote‌ ‌})‌ ‌

})‌ ‌

const‌ ‌json‌ ‌=‌ ‌await‌ ‌req.json()‌ ‌
 ‌

if(json.status‌ ‌===‌ ‌'ok')‌ ‌{‌ ‌


dispatch(setUserDetails(json.data))‌ ‌


Router.push('/dashboard')‌ ‌

}‌ ‌else‌ ‌{‌ ‌


alert('Error‌ ‌Registering')‌ ‌

}‌ ‌
 ‌
}‌ ‌
 ‌
return‌ ‌(‌ ‌
 ‌

<form‌ ‌method="POST">‌ ‌


<div‌ ‌className="box">‌ ‌
 ‌



<h1>Register</h1>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Username"‌ ‌className="field"‌ ‌
value={username}‌ ‌onChange={e‌ ‌=>‌ ‌setUsername(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Name"‌ ‌className="field"‌ ‌
value={name}‌ ‌onChange={e‌ ‌=>‌ ‌setName(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Age"‌ ‌className="field"‌ ‌
value={age}‌ ‌onChange={e‌ ‌=>‌ ‌setAge(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="text"‌ ‌placeholder="Fav.‌ ‌Quote"‌ ‌className="field"‌ ‌
value={quote}‌ ‌onChange={e‌ ‌=>‌ ‌setQuote(e.target.value)}‌ ‌/>‌ ‌
 ‌



<input‌ ‌type="password"‌ ‌placeholder="Password"‌ ‌
className="field"‌ ‌value={password}‌ ‌onChange={e‌ ‌=>‌ ‌setPassword(e.target.value)}‌ ‌/>‌ ‌
 ‌



<div‌ ‌className="btn"‌ ‌onClick={submitForm}>Register</div>‌ ‌
 ‌


</div>‌ ‌
 ‌

</form>‌ ‌
)‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌RegisterPage‌ ‌
 ‌
IndexPage‌‌
//‌ ‌pages/register/styles.css‌ ‌
*‌ ‌{‌ ‌
margin:‌ ‌0;‌ ‌
padding:‌ ‌0;‌ ‌
box-sizing:‌ ‌border-box;‌ ‌
outline:‌ ‌0;‌ ‌
}‌ ‌
 ‌
body‌ ‌{‌ ‌
font-family:‌ ‌'Open‌ ‌Sans',‌ ‌sans-serif;‌ ‌
background:‌ ‌#3498db;‌ ‌
margin:‌ ‌0‌ ‌auto‌ ‌0‌ ‌auto;‌ ‌
width:‌ ‌100%;‌ ‌
text-align:‌ ‌center;‌ ‌
margin:‌ ‌20px‌ ‌0px‌ ‌20px‌ ‌0px;‌ ‌
}‌ ‌
 ‌
p‌ ‌{‌ ‌
font-size:‌ ‌12px;‌ ‌
text-decoration:‌ ‌none;‌ ‌
color:‌ ‌#ffffff;‌ ‌
}‌ ‌
 ‌
h1‌ ‌{‌ ‌
font-size:‌ ‌1.5em;‌ ‌
color:‌ ‌#525252;‌ ‌
}‌ ‌
 ‌
.box‌ ‌{‌ ‌
background:‌ ‌white;‌ ‌
width:‌ ‌300px;‌ ‌
position:‌ ‌absolute;‌ ‌
top:‌ ‌50%;‌ ‌
left:‌ ‌50%;‌ ‌
transform:‌ ‌translate(-50%,‌ ‌-50%);‌ ‌
border-radius:‌ ‌6px;‌ ‌
padding:‌ ‌20px;‌ ‌
box-shadow:‌ ‌0‌ ‌0‌ ‌5px‌ ‌black;‌ ‌
}‌ ‌
 ‌
.field‌ ‌{‌ ‌
background:‌ ‌#ecf0f1;‌ ‌
border:‌ ‌#ccc‌ ‌1px‌ ‌solid;‌ ‌
border-bottom:‌ ‌#ccc‌ ‌2px‌ ‌solid;‌ ‌
padding:‌ ‌8px;‌ ‌
width:‌ ‌100%;‌ ‌
color:‌ ‌#AAA;‌ ‌
margin-top:‌ ‌10px;‌ ‌
font-size:‌ ‌1em;‌ ‌
border-radius:‌ ‌4px;‌ ‌
}‌ ‌
 ‌
.btn‌ ‌{‌ ‌
background:‌ ‌#2ecc71;‌ ‌
width:‌ ‌100%;‌ ‌
cursor:‌ ‌pointer;‌ ‌
padding:‌ ‌5px‌ ‌0;‌ ‌
color:‌ ‌white;‌ ‌
border-radius:‌ ‌4px;‌ ‌
border:‌ ‌#27ae60‌ ‌1px‌ ‌solid;‌ ‌
margin-top:‌ ‌20px;‌ ‌
font-weight:‌ ‌800;‌ ‌
font-size:‌ ‌0.8em;‌ ‌
}‌ ‌
 ‌
.btn:hover‌ ‌{‌ ‌
background:‌ ‌#2CC06B;‌ ‌
}‌ ‌
api/register‌‌
//‌ ‌api/register/index.ts‌ ‌
import‌ ‌{‌ ‌NextApiRequest,‌ ‌NextApiResponse‌ ‌}‌ ‌from‌ ‌'next'‌ ‌
import‌ ‌methods‌ ‌from‌ ‌'./userlist'‌ ‌
 ‌
export‌ ‌default‌ ‌async‌ ‌(req:‌ ‌NextApiRequest,‌ ‌res:‌ ‌NextApiResponse)‌ ‌=>‌ ‌{‌ ‌
 ‌
const‌ ‌{‌ ‌username,‌ ‌password,‌ ‌name,‌ ‌age,‌ ‌favQuote‌ ‌}‌ ‌=‌ ‌req.body‌ ‌
 ‌
if(!methods.doesUserExist(username))‌ ‌{‌ ‌

methods.addUser(username,‌ ‌password,‌ ‌{‌ ‌name,‌ ‌age,‌ ‌favQuote‌ ‌})‌ ‌

return‌ ‌res.json({‌ ‌status:‌ ‌'ok',‌ ‌data:‌ ‌{‌ ‌name,‌ ‌age,‌ ‌favQuote‌ ‌}‌ ‌})‌ ‌
}‌ ‌else‌ ‌{‌ ‌

return‌ ‌res.json({‌ ‌status:‌ ‌'error',‌ ‌message:‌ ‌'User‌ ‌already‌ ‌registered'‌ ‌})‌ ‌
}‌ ‌
 ‌
}‌ ‌

type‌ ‌DataType‌ ‌=‌ ‌{‌ ‌
name:‌ ‌string‌ ‌
age:‌ ‌string‌ ‌
favQuote:‌ ‌string‌ ‌
}‌ ‌
 ‌
type‌ ‌UserType‌ ‌=‌ ‌{‌ ‌
username:‌ ‌string‌ ‌
password:‌ ‌string‌ ‌
data:‌ ‌DataType‌ ‌
}‌ ‌
 ‌
const‌ ‌users:‌ ‌UserType[]‌ ‌=‌ ‌[]‌ ‌
 ‌
const‌ ‌methods‌ ‌=‌ ‌{‌ ‌
getUsers():‌ ‌UserType[]‌ ‌{‌ ‌

return‌ ‌users‌ ‌
},‌ ‌
doesUserExist(username:‌ ‌string):‌ ‌boolean‌ ‌{‌ ‌

return‌ ‌!!users.find(user‌ ‌=>‌ ‌user.username‌ ‌===‌ ‌username)‌ ‌
},‌ ‌
addUser(username:‌ ‌string,‌ ‌password:‌ ‌string,‌ ‌data:‌ ‌DataType)‌ ‌{‌ ‌

users.push({‌ ‌username,‌ ‌password,‌ ‌data‌ ‌})‌ ‌

return‌ ‌true‌ ‌
}‌ ‌
}‌ ‌
 ‌
export‌ ‌default‌ ‌methods‌ ‌

